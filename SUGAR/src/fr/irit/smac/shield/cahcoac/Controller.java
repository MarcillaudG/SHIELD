package fr.irit.smac.shield.cahcoac;

import fr.irit.smac.shield.cahcoac.Function.NormalisedWeightedSum;
import fr.irit.smac.shield.cahcoac.Function.OutputFunction;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.*;
import javafx.stage.FileChooser;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;

import java.io.*;
import java.net.URL;
import java.util.*;

public class Controller implements Initializable {
    @FXML
    private TextField maxOutputTF_FX;

    @FXML
    private TextField nbGenTF_FX;

    @FXML
    private TextArea inputTA_FX;

    @FXML
    private TextField inputNameTF_FX;

    @FXML
    private TextField inputMaxBoundTF_FX;

    @FXML
    private ChoiceBox<String> generationTypeCoB_FX;

    @FXML
    private CheckBox doLxPlotInputChB_FX;

    @FXML
    private CheckBox doLxPlotGenChB_FX;

    @FXML
    private Button generateBtn_FX;

    @FXML
    private ChoiceBox<String> weightTypeCoB_FX;

    @FXML
    private Button importInputsTXTBtn_FX;

    @FXML
    private Button importInputsJSONBtn_FX;

    @FXML
    private Label errorGenTF_FX;

    @FXML
    private Label errorMaxboundTF_FX;

    @FXML
    private Label errorInputsTF_FX;

    @FXML
    private Label errorFileNameTF_FX;

    @FXML
    private CheckBox doFileChB_FX;

    @FXML
    private TextField fileNameTF_FX;

    @FXML
    private TextArea displayTA_FX;

    @FXML
    private Button genInputsBtn_FX;

    @FXML
    private TextField maxBoundInputTF_FX;

    @FXML
    private TextField nbInputTF_FX;

    @FXML
    private Label inputBoundErrTF_FX;

    @FXML
    private Label errorNbInputTF_FX;

    @FXML
    private TextArea consoleLogTA_FX;

    @FXML
    private Label errorInputFormatTF_FX;

    @Override
    public void initialize(URL location, ResourceBundle resources) {
        weightTypeCoB_FX.getItems().clear();
        weightTypeCoB_FX.getItems().addAll("Fixed","Random");
        weightTypeCoB_FX.getSelectionModel().selectFirst();

        generationTypeCoB_FX.getItems().clear();
        generationTypeCoB_FX.getItems().addAll("Noise Gen","Random Gen","SHIELD Gen");
        generationTypeCoB_FX.getSelectionModel().selectFirst();

        generateBtn_FX.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent event) {
                generate();
            }
        });

        genInputsBtn_FX.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent event) {
                addInputs();
            }
        });

        importInputsTXTBtn_FX.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent event) {
                importInputTXT();
            }
        });

        importInputsJSONBtn_FX.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent event) {
                importInputJSON();
            }
        });

    }

    private void importInputTXT(){
        FileChooser fileChooser = new FileChooser();
        fileChooser.setTitle("Choose a TXT File to import(same format as in app inputs)");
        File file = fileChooser.showOpenDialog(consoleLogTA_FX.getScene().getWindow());
        String inputs = "";
        errorInputFormatTF_FX.setText("");
        try{
            Scanner sc = new Scanner(file);
            if(!isValidInputs(inputs)) {
                errorInputFormatTF_FX.setText("Invalid input format.");

            } else {
                while (sc.hasNextLine())
                   inputs+= sc.nextLine()+"\n";
                inputTA_FX.setText((inputTA_FX.getText().trim()+"\n"+inputs).trim());
            }
        } catch (Exception e){
            e.printStackTrace();
        }
    }

    @SuppressWarnings("Duplicates")
    private void importInputJSON(){
        FileChooser fileChooser = new FileChooser();
        fileChooser.setTitle("Choose a JSON File to import(generated by this program)");
        JSONParser parser = new JSONParser();
        double outputMaxBound = -1;
        int nbGen = -1;
        String inputs = "";
        try {
            JSONObject jsonData;
            JSONObject jsonInfo;

            Object objData = parser.parse(new FileReader(fileChooser.showOpenDialog(inputTA_FX.getScene().getWindow())));
            jsonData = (JSONObject) objData;

            jsonInfo = (JSONObject) jsonData.get("info");
            nbGen = Integer.parseInt(jsonInfo.get("nbGenerations").toString());
            outputMaxBound = Double.parseDouble(jsonInfo.get("outputMaxBound").toString());

            JSONObject jsonVarBounds = (JSONObject) jsonData.get("bounds");
            for( Object k : jsonVarBounds.keySet()){
                JSONObject jsonBounds = (JSONObject)jsonVarBounds.get(k);
                inputs += k.toString()+" "+jsonBounds.get("max")+"\n";
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        inputTA_FX.setText((inputTA_FX.getText()+"\n"+inputs).trim());
        maxOutputTF_FX.clear();
        maxOutputTF_FX.setText(outputMaxBound+"");
        nbGenTF_FX.clear();
        nbGenTF_FX.setText(nbGen+"");

    }

    private void addInputs(){
        String nbInput_s = nbInputTF_FX.getText();
        String inputBound_s = maxBoundInputTF_FX.getText();
        double inputBound;
        int nbInput;
        inputBoundErrTF_FX.setText("");
        errorNbInputTF_FX.setText("");
        if(!isPositiveDouble(inputBound_s) || !isPositiveInteger(nbInput_s)) {
            if (!isPositiveDouble(inputBound_s)) inputBoundErrTF_FX.setText("Input bound must be a positive double");
            if (!isPositiveInteger(nbInput_s)) errorNbInputTF_FX.setText("Nb input must be a positive integer");
        } else {
            nbInput = Integer.parseInt(nbInput_s);
            inputBound = Double.parseDouble(inputBound_s);
            for(int i=1000;i<nbInput+1000;i++){
                inputTA_FX.setText(inputTA_FX.getText().trim()+"\nautoGenInput"+i+" "+inputBound);
            }
        }

    }

    private void generate(){
        String weightType = weightTypeCoB_FX.getSelectionModel().getSelectedItem();
        String genType = generationTypeCoB_FX.getSelectionModel().getSelectedItem();
        String maxBound_S = maxOutputTF_FX.getText();
        String inputs = inputTA_FX.getText();
        Boolean doLxInputDiplay = doLxPlotInputChB_FX.isSelected();
        Boolean doLxPlotGen = doLxPlotGenChB_FX.isSelected();
        Boolean doFile = doFileChB_FX.isSelected();
        String fileName = fileNameTF_FX.getText();
        String nbGen_s = nbGenTF_FX.getText();
        Map<String,Double> in = new HashMap<>();
        double maxBound;
        int nbGen;
        GeneratorInputCAC genIn;
        GeneratorOutputCAC genOut;
        errorInputsTF_FX.setText("");
        errorGenTF_FX.setText("");
        errorMaxboundTF_FX.setText("");
        errorFileNameTF_FX.setText("");
        if(!isPositiveDouble(maxBound_S) || !isPositiveInteger(nbGen_s) || !isValidInputs(inputs) || (doFile && !isValidFileName(fileName))) {
            if (!isPositiveDouble(maxBound_S)) errorMaxboundTF_FX.setText("MaxOutput needs to be a positive Double(>0)");
            if (!isPositiveInteger(nbGen_s)) errorGenTF_FX.setText("NbGen needs to be a positive Integer (>0)");
            if (!isValidInputs(inputs)) errorInputsTF_FX.setText("Error in input format.");
            if (doFile && !isValidFileName(fileName)) errorFileNameTF_FX.setText("FileName not valid");
        } else {
            maxBound = Double.parseDouble(maxBound_S);
            nbGen = Integer.parseInt(nbGen_s);
            String[] input_list = inputs.split("\n");
            String inputName;
            String inputBound;
            for(String line:input_list){
                inputName = line.split(" ")[0];
                inputBound = line.split(" ")[1];
                in.put(inputName,Double.parseDouble(inputBound));
            }

            //##############################################################################################################
            //initialisation du générateur d'input (entrées/indicateurs)
            genIn = new GeneratorInputCAC();
            //initialisation du generateur avec leses indicateurs du preset
            for (Map.Entry<String,Double> e:in.entrySet()) {
                genIn.initVariableWithRange(e.getKey(),0.0,e.getValue());
            }

            //##############################################################################################################
            //initialisation du generateur d'output (sortie/attention)
            OutputFunction outputFunction = new NormalisedWeightedSum();
            if(weightType == "Fixed")
                genOut = new GeneratorOutputCAC(outputFunction,in.keySet(),maxBound,false);
            else
                genOut = new GeneratorOutputCAC(outputFunction,in.keySet(),maxBound,true);

            //##############################################################################################################
            //génération des valeurs des indicateurs
            for (int i = 0; i < nbGen; i++) {
                //génération d'une instance d'inputs
                if(genType == "Noise Gen") genIn.generateAllValuesWithNoise();
                else if(genType == "Random Gen") genIn.generateAllRandomValues();
                else  genIn.generateAllValues();
                //génération des output
                genOut.addGeneration(genIn.getAllVariablesWithValue());
            }

            //##############################################################################################################
            //affichage LxPlot
            //inputs
            if(doLxInputDiplay)genOut.displayDataLxPlotInput();
            //per generation
            if(doLxPlotGen)genOut.displayDataLxPlotGeneration();

            //##############################################################################################################
            //affichage console
            genOut.printAllData();

            //##############################################################################################################
            //write JSON to file
            if(doFile) {
                try (FileWriter file = new FileWriter(fileName)) {
                    file.write(genOut.dataToJSON());
                    file.flush();
                    System.out.println("File Saved: "+fileName);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            displayTA_FX.clear();
            displayTA_FX.setText(genOut.dataToJSON());

            consoleLogTA_FX.clear();
            consoleLogTA_FX.setText(genOut.getDataAsString());
        }

    }

    private boolean isPositiveDouble(String s){
        String regex = "^(-?)(0|([1-9][0-9]*))(\\.[0-9]+)?$";
        return s.matches(regex);
    }

    private boolean isPositiveInteger(String s){
        String regex = "^[1-9]\\d*$";
        return s.matches(regex);
    }

    private boolean isValidInputs(String s){
        return s.matches("^(\\S+ (-?)(0|([1-9][0-9]*))(\\.[0-9]+)?\n)*(\\S+ (-?)(0|([1-9][0-9]*))(\\.[0-9]+)?)");

    }

    private boolean isValidFileName(String s){
        return s.matches("\\A(?!(?:COM[0-9]|CON|LPT[0-9]|NUL|PRN|AUX|com[0-9]|con|lpt[0-9]|nul|prn|aux)|[\\s\\.])[^\\\\\\/:*\"?<>|]{1,254}\\z");
    }
}
